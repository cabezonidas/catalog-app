/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TasksIndexImport } from './routes/tasks/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as TasksNewImport } from './routes/tasks/new'
import { Route as TasksTaskIdImport } from './routes/tasks/$taskId'
import { Route as TasksTaskIdEditImport } from './routes/tasks_/$taskId/edit'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TasksIndexRoute = TasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const TasksNewRoute = TasksNewImport.update({
  id: '/tasks/new',
  path: '/tasks/new',
  getParentRoute: () => rootRoute,
} as any)

const TasksTaskIdRoute = TasksTaskIdImport.update({
  id: '/tasks/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => rootRoute,
} as any)

const TasksTaskIdEditRoute = TasksTaskIdEditImport.update({
  id: '/tasks_/$taskId/edit',
  path: '/tasks/$taskId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/tasks/$taskId': {
      id: '/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdImport
      parentRoute: typeof rootRoute
    }
    '/tasks/new': {
      id: '/tasks/new'
      path: '/tasks/new'
      fullPath: '/tasks/new'
      preLoaderRoute: typeof TasksNewImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexImport
      parentRoute: typeof rootRoute
    }
    '/tasks_/$taskId/edit': {
      id: '/tasks_/$taskId/edit'
      path: '/tasks/$taskId/edit'
      fullPath: '/tasks/$taskId/edit'
      preLoaderRoute: typeof TasksTaskIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tasks/$taskId': typeof TasksTaskIdRoute
  '/tasks/new': typeof TasksNewRoute
  '/admin': typeof AdminIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/tasks/$taskId/edit': typeof TasksTaskIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tasks/$taskId': typeof TasksTaskIdRoute
  '/tasks/new': typeof TasksNewRoute
  '/admin': typeof AdminIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/tasks/$taskId/edit': typeof TasksTaskIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/tasks/$taskId': typeof TasksTaskIdRoute
  '/tasks/new': typeof TasksNewRoute
  '/admin/': typeof AdminIndexRoute
  '/tasks/': typeof TasksIndexRoute
  '/tasks_/$taskId/edit': typeof TasksTaskIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tasks/$taskId'
    | '/tasks/new'
    | '/admin'
    | '/tasks'
    | '/tasks/$taskId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/tasks/$taskId'
    | '/tasks/new'
    | '/admin'
    | '/tasks'
    | '/tasks/$taskId/edit'
  id:
    | '__root__'
    | '/'
    | '/tasks/$taskId'
    | '/tasks/new'
    | '/admin/'
    | '/tasks/'
    | '/tasks_/$taskId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TasksTaskIdRoute: typeof TasksTaskIdRoute
  TasksNewRoute: typeof TasksNewRoute
  AdminIndexRoute: typeof AdminIndexRoute
  TasksIndexRoute: typeof TasksIndexRoute
  TasksTaskIdEditRoute: typeof TasksTaskIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TasksTaskIdRoute: TasksTaskIdRoute,
  TasksNewRoute: TasksNewRoute,
  AdminIndexRoute: AdminIndexRoute,
  TasksIndexRoute: TasksIndexRoute,
  TasksTaskIdEditRoute: TasksTaskIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/tasks/$taskId",
        "/tasks/new",
        "/admin/",
        "/tasks/",
        "/tasks_/$taskId/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/tasks/$taskId": {
      "filePath": "tasks/$taskId.tsx"
    },
    "/tasks/new": {
      "filePath": "tasks/new.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/tasks/": {
      "filePath": "tasks/index.tsx"
    },
    "/tasks_/$taskId/edit": {
      "filePath": "tasks_/$taskId/edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
