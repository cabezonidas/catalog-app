/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as TasksTasksImport } from './routes/_tasks/tasks'
import { Route as TasksTasksIndexImport } from './routes/_tasks/tasks/index'
import { Route as TasksTasksNewImport } from './routes/_tasks/tasks/new'
import { Route as TasksTasksTaskIdImport } from './routes/_tasks/tasks/$taskId'
import { Route as TasksTasksTaskIdEditImport } from './routes/_tasks/tasks_/$taskId/edit'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const TasksTasksRoute = TasksTasksImport.update({
  id: '/_tasks/tasks',
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any)

const TasksTasksIndexRoute = TasksTasksIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TasksTasksRoute,
} as any)

const TasksTasksNewRoute = TasksTasksNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => TasksTasksRoute,
} as any)

const TasksTasksTaskIdRoute = TasksTasksTaskIdImport.update({
  id: '/$taskId',
  path: '/$taskId',
  getParentRoute: () => TasksTasksRoute,
} as any)

const TasksTasksTaskIdEditRoute = TasksTasksTaskIdEditImport.update({
  id: '/_tasks/tasks_/$taskId/edit',
  path: '/tasks/$taskId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_tasks/tasks': {
      id: '/_tasks/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksTasksImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/_tasks/tasks/$taskId': {
      id: '/_tasks/tasks/$taskId'
      path: '/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTasksTaskIdImport
      parentRoute: typeof TasksTasksImport
    }
    '/_tasks/tasks/new': {
      id: '/_tasks/tasks/new'
      path: '/new'
      fullPath: '/tasks/new'
      preLoaderRoute: typeof TasksTasksNewImport
      parentRoute: typeof TasksTasksImport
    }
    '/_tasks/tasks/': {
      id: '/_tasks/tasks/'
      path: '/'
      fullPath: '/tasks/'
      preLoaderRoute: typeof TasksTasksIndexImport
      parentRoute: typeof TasksTasksImport
    }
    '/_tasks/tasks_/$taskId/edit': {
      id: '/_tasks/tasks_/$taskId/edit'
      path: '/tasks/$taskId/edit'
      fullPath: '/tasks/$taskId/edit'
      preLoaderRoute: typeof TasksTasksTaskIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface TasksTasksRouteChildren {
  TasksTasksTaskIdRoute: typeof TasksTasksTaskIdRoute
  TasksTasksNewRoute: typeof TasksTasksNewRoute
  TasksTasksIndexRoute: typeof TasksTasksIndexRoute
}

const TasksTasksRouteChildren: TasksTasksRouteChildren = {
  TasksTasksTaskIdRoute: TasksTasksTaskIdRoute,
  TasksTasksNewRoute: TasksTasksNewRoute,
  TasksTasksIndexRoute: TasksTasksIndexRoute,
}

const TasksTasksRouteWithChildren = TasksTasksRoute._addFileChildren(
  TasksTasksRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tasks': typeof TasksTasksRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/tasks/$taskId': typeof TasksTasksTaskIdRoute
  '/tasks/new': typeof TasksTasksNewRoute
  '/tasks/': typeof TasksTasksIndexRoute
  '/tasks/$taskId/edit': typeof TasksTasksTaskIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminIndexRoute
  '/tasks/$taskId': typeof TasksTasksTaskIdRoute
  '/tasks/new': typeof TasksTasksNewRoute
  '/tasks': typeof TasksTasksIndexRoute
  '/tasks/$taskId/edit': typeof TasksTasksTaskIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_tasks/tasks': typeof TasksTasksRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/_tasks/tasks/$taskId': typeof TasksTasksTaskIdRoute
  '/_tasks/tasks/new': typeof TasksTasksNewRoute
  '/_tasks/tasks/': typeof TasksTasksIndexRoute
  '/_tasks/tasks_/$taskId/edit': typeof TasksTasksTaskIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tasks'
    | '/admin'
    | '/tasks/$taskId'
    | '/tasks/new'
    | '/tasks/'
    | '/tasks/$taskId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/tasks/$taskId'
    | '/tasks/new'
    | '/tasks'
    | '/tasks/$taskId/edit'
  id:
    | '__root__'
    | '/'
    | '/_tasks/tasks'
    | '/admin/'
    | '/_tasks/tasks/$taskId'
    | '/_tasks/tasks/new'
    | '/_tasks/tasks/'
    | '/_tasks/tasks_/$taskId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TasksTasksRoute: typeof TasksTasksRouteWithChildren
  AdminIndexRoute: typeof AdminIndexRoute
  TasksTasksTaskIdEditRoute: typeof TasksTasksTaskIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TasksTasksRoute: TasksTasksRouteWithChildren,
  AdminIndexRoute: AdminIndexRoute,
  TasksTasksTaskIdEditRoute: TasksTasksTaskIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_tasks/tasks",
        "/admin/",
        "/_tasks/tasks_/$taskId/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_tasks/tasks": {
      "filePath": "_tasks/tasks.tsx",
      "children": [
        "/_tasks/tasks/$taskId",
        "/_tasks/tasks/new",
        "/_tasks/tasks/"
      ]
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/_tasks/tasks/$taskId": {
      "filePath": "_tasks/tasks/$taskId.tsx",
      "parent": "/_tasks/tasks"
    },
    "/_tasks/tasks/new": {
      "filePath": "_tasks/tasks/new.tsx",
      "parent": "/_tasks/tasks"
    },
    "/_tasks/tasks/": {
      "filePath": "_tasks/tasks/index.tsx",
      "parent": "/_tasks/tasks"
    },
    "/_tasks/tasks_/$taskId/edit": {
      "filePath": "_tasks/tasks_/$taskId/edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
